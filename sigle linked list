#include<stdio.h>
#include<stdlib.h>
#include<malloc.h>
struct node{
int data;
struct node * next;
};
struct node * start=NULL;
struct node * create(struct node * );
struct node * display(struct node *);
struct node * insert_beg(struct node *);
struct node * insert_end(struct node *);
struct node * insert_atposition(struct node *);
struct node * delete_beg(struct node *);
struct node * delete_end(struct node *);
struct node * delete_atposition(struct node *);
void main()
{
    int choice;
    while(1)
    {

        printf("\n1.create\n2.display\n3.insert_beg\n4.insert_end\n5.insert_atposition\n6.delete_beg\n7.delete_end\n8.delete_atposition\n.9.exit");
        printf("\nenter choice");
        scanf("%d",&choice);
        switch(choice)
        {
            case 1:start=create(start);
            break;
            case 2:
                start=display(start);
                break;
            case 3:
                start=insert_beg(start);
                break;
            case 4:
                start=insert_end(start);
                break;
            case 5:
                start=insert_atposition(start);
                break;
                case 6:
                    start=delete_beg(start);
                    break;
                case 7:
                    start=delete_end(start);
                    break;
                case 8:
                    start=delete_atposition(start);
                    break;
                case 9:
                    exit(0);
        }

    }
}
struct node * create(struct node *start)
{
    struct node * newnode,*ptr;
    int num;
    printf("\nEnter data");
    printf("\nenter -1 to exit");

    scanf("%d",&num);
    while( num!=-1)
    {
        newnode=(struct node *)malloc(sizeof(struct node *));
        newnode->data=num;
        newnode->next=NULL;
        if(start==NULL)
        {
            start=newnode;

        }
        else
        {
            ptr=start;
            while(ptr->next!=NULL)
            {
                ptr=ptr->next;
            }
            ptr->next=newnode;

        }
        printf("enter data");
        scanf("%d",&num);
    }
    return start;
};
struct node * display(struct node * start)
{
    struct node * ptr;
    ptr=start;
    while(ptr!=NULL)
    {
        printf("%d",ptr->data);
        ptr=ptr->next;
    }
    return start;
};
struct node * insert_beg(struct node * start)
{
    struct node * newnode,*ptr;
    printf("enter data");
    int num;
    scanf("%d",&num);
    newnode=(struct node *)malloc (sizeof(struct node *));
    newnode->data=num;
    ptr=start;
    start=newnode;
    newnode->next=ptr;
    return start;




};
struct node *insert_end(struct node * start)
{
    struct node* newnode,*ptr;
     printf("enter data");
    int num;
    scanf("%d",&num);
    newnode=(struct node *)malloc (sizeof(struct node *));
    newnode->data=num;
    if(start==NULL)
    {
        start=newnode;
        newnode->next=NULL;
    }
    else
    {
        ptr=start;
        while(ptr->next!=NULL)
        {
            ptr=ptr->next;
        }
        ptr->next=newnode;
        newnode->next=NULL;

    }
    return start;
};
struct node * insert_atposition(struct node * start)
{
    struct node * ptr,*preptr,*newnode;
    int pos=1,val;
    printf("enter the position of insertion");
    scanf("%d",&val);
    newnode=(struct node *)malloc (sizeof(struct node*));
    printf("Enter data");
    int num;
    scanf("%d",&num);
    newnode->data=num;
    ptr=start;
    preptr=ptr;
    while(pos!=val)
    {preptr=ptr;
        ptr=ptr->next;
        pos++;
    }
    preptr->next=newnode;
    newnode->next=ptr;
    return start;
};
struct node *delete_beg(struct node * start)
{
    struct node * ptr;
    ptr=start;
    start=start->next;
    free(ptr);
    return start;
};
struct node * delete_end(struct node* start)
{
    struct node * ptr,*preptr;
    ptr=start;
    preptr=ptr;
    while(ptr->next!=NULL)
    {
        preptr=ptr;
        ptr=ptr->next;
    }
    preptr->next=NULL;
    free(ptr);
    return start;
};
struct node * delete_atposition(struct node * start)
{
    struct node * ptr,*preptr;
    int pos=1,val;
    printf("enter the position of deletion");
    scanf("%d",&val);
    ptr=start;
    preptr=ptr;
    while(pos!=val)
    {preptr=ptr;
        ptr=ptr->next;
        pos++;
    }
    preptr->next=ptr->next;
    return start;
};
output:
1.create
2.display
3.insert_beg
4.insert_end
5.insert_atposition
6.delete_beg
7.delete_end
8.delete_atposition
.9.exit
enter choice1

Enter data
enter -1 to exit1
enter data2
enter data3
enter data4
enter data-1

1.create
2.display
3.insert_beg
4.insert_end
5.insert_atposition
6.delete_beg
7.delete_end
8.delete_atposition
.9.exit
enter choice2
1234
1.create
2.display
3.insert_beg
4.insert_end
5.insert_atposition
6.delete_beg
7.delete_end
8.delete_atposition
.9.exit
enter choice3
enter data8

1.create
2.display
3.insert_beg
4.insert_end
5.insert_atposition
6.delete_beg
7.delete_end
8.delete_atposition
.9.exit
enter choice2
81234
1.create
2.display
3.insert_beg
4.insert_end
5.insert_atposition
6.delete_beg
7.delete_end
8.delete_atposition
.9.exit
enter choice4
enter data9

1.create
2.display
3.insert_beg
4.insert_end
5.insert_atposition
6.delete_beg
7.delete_end
8.delete_atposition
.9.exit
enter choice2
812349
1.create
2.display
3.insert_beg
4.insert_end
5.insert_atposition
6.delete_beg
7.delete_end
8.delete_atposition
.9.exit
enter choice5
enter the position of insertion2
Enter data7

1.create
2.display
3.insert_beg
4.insert_end
5.insert_atposition
6.delete_beg
7.delete_end
8.delete_atposition
.9.exit
enter choice2
8712349
1.create
2.display
3.insert_beg
4.insert_end
5.insert_atposition
6.delete_beg
7.delete_end
8.delete_atposition
.9.exit
enter choice6

1.create
2.display
3.insert_beg
4.insert_end
5.insert_atposition
6.delete_beg
7.delete_end
8.delete_atposition
.9.exit
enter choice2
712349
1.create
2.display
3.insert_beg
4.insert_end
5.insert_atposition
6.delete_beg
7.delete_end
8.delete_atposition
.9.exit
enter choice7

1.create
2.display
3.insert_beg
4.insert_end
5.insert_atposition
6.delete_beg
7.delete_end
8.delete_atposition
.9.exit
enter choice2
71234
1.create
2.display
3.insert_beg
4.insert_end
5.insert_atposition
6.delete_beg
7.delete_end
8.delete_atposition
.9.exit
enter choice8
enter the position of deletion3

1.create
2.display
3.insert_beg
4.insert_end
5.insert_atposition
6.delete_beg
7.delete_end
8.delete_atposition
.9.exit
enter choice2
7134
1.create
2.display
3.insert_beg
4.insert_end
5.insert_atposition
6.delete_beg
7.delete_end
8.delete_atposition
.9.exit
enter choice
